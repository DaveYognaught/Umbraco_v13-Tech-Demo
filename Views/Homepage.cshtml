@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage;
@using Umbraco.Cms.Core.Models.Blocks;
@{
	Layout = "Master.cshtml";
    int count = Model.Value<IEnumerable<BlockListItem>>("headerCarousel").Count();
    var headerSlides = Model.Value<IEnumerable<BlockListItem>>("headerCarousel");

    var firstBlockgrid = Model.Value<IEnumerable<BlockGridItem>>("firstBlockgrid");
    var headliners = Model.Value<IEnumerable<BlockGridItem>>("headliners");
    var secondBlockgrid = Model.Value<IEnumerable<BlockGridItem>>("secondBlockgrid");
}

@section phBody 
{
    <!-- Blocklist Carousel -->
    <div id="Carousel" class="carousel slide" data-bs-ride="carousel">
        <div class="carousel-indicators z-3">
            @for (int i = 0; i < count; i++)
            {
                <button type="button" data-bs-target="#Carousel" data-bs-slide-to="@i" class="@(i == 0 ? "active" : "")" aria-current="true" aria-label="Slide @(i + 1)"></button>
            }
        </div>
        <div class="carousel-inner">
            @foreach (var item in headerSlides)
            {
                var content = item.Content;
                var imagePath = content.HasValue("backgroundImage") ? content.Value<IPublishedContent>("backgroundImage").Url() : "";
                <div class="carousel-item @(item == headerSlides.First() ? "active" : "") position-relative overflow-hidden text-center bg-body-tertiary bg-norepeat" style="background-image:url(@imagePath);">    
                    @if(content.Value<bool>("darkOverlay"))
                    {
                        <div class="overlay"></div>
                    }

                    <div class="col-md-6 p-lg-5 mx-auto z-2 position-relative @(content.Value<bool>("darkText") ? "text-black" : "")">
                        @if(content.HasValue("header"))
                        {
                            <h1 class="display-3 fw-bold">@content.Value("header")</h1>
                        }

                        @if (content.HasValue("subheading"))
                        {
                            <h3 class="fw-normal mb-3">@content.Value("subheading")</h3>
                        }

                        @if (content.HasValue("linkText") && (content.HasValue("internalLink") || content.HasValue("externalLink")))
                        {
                            var urlLink = "";
                            if(content.HasValue("internalLink"))
                            {
                                urlLink = content.Value<IPublishedContent>("internalLink").Url();
                            }
                            else
                            {
                                urlLink = content.Value("externalLink").ToString();
                            }

                            <div class="d-flex gap-3 justify-content-center lead fw-normal">
                                <a class="icon-link btn btn-secondary" href="@urlLink">
                                    @content.Value("linkText")
                                    <svg class="bi"><use xlink:href="#chevron-right" /></svg>
                                </a>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
        <button class="carousel-control-prev" type="button" data-bs-target="#Carousel" data-bs-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Previous</span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#Carousel" data-bs-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Next</span>
        </button>
    </div>

    <!-- Add a Blockgrid -->

    @foreach (var row in firstBlockgrid)
    {
        <div class="d-md-flex flex-md-equal w-100 @(row == firstBlockgrid.Last() ? "mb-3" : "")" id="Blockgrid">
            @foreach(var area in row.Areas)
            {
                //Get Left Or Right and use correct Alias
                var content = row.Areas.Where(x => x.Alias == @area.Alias).FirstOrDefault();
                var header = content[0].Content.Value("header");
                var mainText = content[0].Content.Value("mainText");
                var imageUrl = "";
                if (content[0].Content.HasValue("image"))
                {
                    imageUrl = content[0].Content.Value<IPublishedContent>("image").Url();
                }

                <div class="text-bg-dark pt-3 pt-md-5 text-center overflow-hidden @(imageUrl == "" ? "d-flex align-items-center justify-content-center" : "")">
                    <div class="my-3 py-3">
                        <h2 class="display-5">@header</h2>
                        @mainText
                    </div>
                    @if(imageUrl != "")
                    {
                         <div class="bg-body-tertiary shadow-sm mx-auto d-flex align-items-center justify-content-center" style="width: 80%; height: 300px; border-radius: 21px">
                            <img src="@imageUrl" alt="RealEmployee">
                        </div>
                    }
                </div>
            }
        </div>
    }

    @{
        var headline = "";
        var richtext = "";
    }
    @foreach (var row in headliners)
    {
        var rowContent = row.Content;

        if (rowContent.HasValue("headline"))
        {
            headline = rowContent.Value("headline").ToString();
        }

        if (rowContent.HasValue("richText"))
        {
            richtext = rowContent.Value("richText").ToString();
        }
    }

    <div class="bg-dark text-light p-5 text-center" id="Headliners">
        <h1 class="display-4">@headline</h1>
        @Html.Raw(richtext)
    </div>

    <div class="container marketing">
        <div class="row">
            @foreach (var row in headliners)
            {
                foreach (var area in row.Areas)
                {
                    //Use correct Alias
                    var content = row.Areas.Where(x => x.Alias == @area.Alias).FirstOrDefault();
                    var header = content[0].Content.Value("header");
                    var mainText = content[0].Content.Value("mainText");
                    var imageUrl = "";
                    if (content[0].Content.HasValue("image"))
                    {
                        imageUrl = content[0].Content.Value<IPublishedContent>("image").Url();
                    }

                    <div class="col-lg-4">
                        <img src="@imageUrl" alt="RealEmployee" class="bd-placeholder-img rounded-circle" width="140" height="140" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="Placeholder" preserveAspectRatio="xMidYMid slice" focusable="false">
                        <h2 class="fw-normal">@header</h2>
                        @mainText
                    </div>
                }
            }
        </div>
    </div>

    <div class="container">
        <hr class="featurette-divider" id="Blockgrid2">

        @{
            var iterate = false;
        }
        @foreach (var row in secondBlockgrid)
        {
            <div class="row featurette">
                @foreach (var area in row.Areas)
                {
                    var content = row.Areas.Where(x => x.Alias == @area.Alias).FirstOrDefault();
                    var mainText = content[0].Content.Value("richtext");
                    var imageUrl = "";
                    if (content[0].Content.HasValue("image"))
                    {
                        imageUrl = content[0].Content.Value<IPublishedContent>("image").Url();
                    }

                    if (area.Alias == "left")
                    {
                        if(!iterate)
                        {
                            <div class="col-md-7">
                                @mainText
                            </div>
                        }
                        else
                        {
                            <div class="col-md-5 order-md-1">
                                <img src="@imageUrl" class="bd-placeholder-img bd-placeholder-img-lg featurette-image img-fluid mx-auto" width="500" height="500" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="Placeholder: 500x500" preserveAspectRatio="xMidYMid slice" focusable="false">
                            </div>
                        }
                    }
                    else
                    {
                        if (!iterate)
                        {
                            <div class="col-md-5">
                                <img src="@imageUrl" class="bd-placeholder-img bd-placeholder-img-lg featurette-image img-fluid mx-auto" width="500" height="500" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="Placeholder: 500x500" preserveAspectRatio="xMidYMid slice" focusable="false">
                            </div>
                        }
                        else
                        {
                            <div class="col-md-7 order-md-2">
                                @mainText
                            </div>
                        }

                        if (!iterate)
                        {
                            iterate = true;
                        }
                        else
                        {
                            iterate = false;
                        }
                    }
                }
            </div>

            <hr class="featurette-divider">
        }
    </div>
}